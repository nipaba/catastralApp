/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.pv168Web.gui;

import cz.pv168Web.enums.State;
import cz.pv168Web.model.Person;
import java.util.regex.Pattern;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import org.apache.commons.lang3.time.DateUtils;


/**
 *
 * Class for person input window
 */
public class PersonInput extends javax.swing.JDialog {

    private Person person;
    private Boolean valid;
    private Boolean update = false;

    /**
     * Creates new form PersonInput
     * @param parent
     * @param modal
     */
    public PersonInput(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customInit();

    }

    /**
     * constructor
     * @param parent
     * @param modal
     * @param updatePerson
     */
    public PersonInput(java.awt.Frame parent, boolean modal, Person updatePerson) {
        super(parent, modal);
        update = true;
        
        initComponents();
        customInit();

     
        person = updatePerson;

        System.out.println(person.toString());
        textPersonBirthNumber.setText(person.getBirthNumber());
        textPersonName.setText(person.getName());
        textPersonSurname.setText(person.getSurname());
        datePicker.setDate(person.getBirthDate());

        comboState.setSelectedIndex(State.getIndexOfState(person.getState()));

    }

    /**
     *
     * @return validity of person
     */
    public Boolean getValid() {
        return valid;
    }

    /**
     *
     * @return person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonCancel = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        datePicker = new org.jdesktop.swingx.JXDatePicker();
        textPersonName = new javax.swing.JTextField();
        labelName = new javax.swing.JLabel();
        labelSurname = new javax.swing.JLabel();
        textPersonSurname = new javax.swing.JTextField();
        textPersonBirthNumber = new javax.swing.JTextField();
        labelBirthNumber = new javax.swing.JLabel();
        comboState = new javax.swing.JComboBox();
        labelState = new javax.swing.JLabel();
        labelTitleNewPerson = new javax.swing.JLabel();
        labelBirthDate = new javax.swing.JLabel();
        labelErrorSurname = new javax.swing.JLabel();
        labelErrorBirthNumber = new javax.swing.JLabel();
        labelErrorName = new javax.swing.JLabel();
        labelErrorDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cz/pv168Web/gui/PersonInput"); // NOI18N
        buttonCancel.setText(bundle.getString("PersonInput.buttonCancel.text")); // NOI18N
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        getContentPane().add(buttonCancel, gridBagConstraints);

        buttonAdd.setText(bundle.getString("PersonInput.buttonAdd.text")); // NOI18N
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        getContentPane().add(buttonAdd, gridBagConstraints);

        datePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datePickerFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        getContentPane().add(datePicker, gridBagConstraints);

        textPersonName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPersonNameFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(textPersonName, gridBagConstraints);

        labelName.setText(bundle.getString("PersonInput.labelName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(labelName, gridBagConstraints);

        labelSurname.setText(bundle.getString("PersonInput.labelSurname.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(labelSurname, gridBagConstraints);

        textPersonSurname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPersonSurnameFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(textPersonSurname, gridBagConstraints);

        textPersonBirthNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPersonBirthNumberFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(textPersonBirthNumber, gridBagConstraints);

        labelBirthNumber.setText(bundle.getString("PersonInput.labelBirthNumber.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(labelBirthNumber, gridBagConstraints);

        comboState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(comboState, gridBagConstraints);

        labelState.setText(bundle.getString("PersonInput.labelState.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(labelState, gridBagConstraints);

        labelTitleNewPerson.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTitleNewPerson.setText(bundle.getString("PersonInput.labelTitleNewPerson.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(labelTitleNewPerson, gridBagConstraints);

        labelBirthDate.setText(bundle.getString("PersonInput.labelBirthDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 33, 0, 33);
        getContentPane().add(labelBirthDate, gridBagConstraints);

        labelErrorSurname.setText(bundle.getString("PersonInput.labelErrorSurname.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        getContentPane().add(labelErrorSurname, gridBagConstraints);

        labelErrorBirthNumber.setText(bundle.getString("PersonInput.labelErrorBirthNumber.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        getContentPane().add(labelErrorBirthNumber, gridBagConstraints);

        labelErrorName.setText(bundle.getString("PersonInput.labelErrorName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        getContentPane().add(labelErrorName, gridBagConstraints);

        labelErrorDate.setText(bundle.getString("PersonInput.labelErrorDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        getContentPane().add(labelErrorDate, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        valid = false;
        this.dispose();

    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed

        valid = validatePersonForm();

        if (valid) {
            this.hide();
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void textPersonNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPersonNameFocusGained
        labelErrorName.setVisible(false);

    }//GEN-LAST:event_textPersonNameFocusGained

    private void textPersonSurnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPersonSurnameFocusGained
        labelErrorSurname.setVisible(false);
    }//GEN-LAST:event_textPersonSurnameFocusGained

    private void textPersonBirthNumberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPersonBirthNumberFocusGained
        labelErrorBirthNumber.setVisible(false);
    }//GEN-LAST:event_textPersonBirthNumberFocusGained

    private void datePickerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datePickerFocusGained
        labelErrorDate.setVisible(false);
    }//GEN-LAST:event_datePickerFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PersonInput dialog = new PersonInput(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JComboBox comboState;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JLabel labelBirthDate;
    private javax.swing.JLabel labelBirthNumber;
    private javax.swing.JLabel labelErrorBirthNumber;
    private javax.swing.JLabel labelErrorDate;
    private javax.swing.JLabel labelErrorName;
    private javax.swing.JLabel labelErrorSurname;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelState;
    private javax.swing.JLabel labelSurname;
    private javax.swing.JLabel labelTitleNewPerson;
    private javax.swing.JTextField textPersonBirthNumber;
    private javax.swing.JTextField textPersonName;
    private javax.swing.JTextField textPersonSurname;
    // End of variables declaration//GEN-END:variables

    private Boolean validatePersonForm() {

        Boolean tmp = true;

        if ("".equals(textPersonName.getText())) {
            labelErrorName.setVisible(true);
            tmp = false;
        }
        if ("".equals(textPersonSurname.getText())) {
            labelErrorSurname.setVisible(true);
            tmp = false;
        }
        String birthNum = textPersonBirthNumber.getText();
        if (birthNum.isEmpty() || birthNum.length() != 10 || !Pattern.matches("[0-9]+", birthNum)) {
            labelErrorBirthNumber.setVisible(true);
            tmp = false;
        }
        if (datePicker.getDate() == null) {
            labelErrorDate.setVisible(true);
            tmp = false;
        }
        
        Date dateBefore18Years = DateUtils.addYears(new Date(), -18);
        if (datePicker.getDate().after(dateBefore18Years)){
            labelErrorDate.setVisible(true);
            tmp = false;
        }

        if (tmp) {
            if (!update) {
                person = new Person();
            }

            person.setName(textPersonName.getText());
            person.setSurname(textPersonSurname.getText());
            person.setBirthNumber(textPersonBirthNumber.getText());
            person.setState((String) comboState.getSelectedItem());
            person.setBirthDate(datePicker.getDate());
        }

        return tmp;
    }

    private void customInit() {
      
        
        labelErrorName.setVisible(false);
        labelErrorSurname.setVisible(false);
        labelErrorBirthNumber.setVisible(false);
        labelErrorDate.setVisible(false);

        comboState.setModel(new DefaultComboBoxModel(State.getStateArray()));
        valid = false;
    }
}
